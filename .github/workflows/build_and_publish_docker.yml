name: Build and Publish Docker Image to GHCR

on:
  push:
    tags: [ 'v*' ]
  repository_dispatch:
    types: [docker-build]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: patrykiti/zen-mcp-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from config.py
      id: extract_version
      run: |
        VERSION=$(grep -E "^__version__\s*=\s*" config.py | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable=${{ github.ref_type == 'tag' || github.event_name == 'repository_dispatch' }}
          type=raw,value=${{ steps.extract_version.outputs.version }},enable=${{ github.event_name == 'repository_dispatch' }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Generate usage instructions
      run: |
        echo "## 🐳 Docker Image Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image Registry:** GitHub Container Registry (GHCR)" >> $GITHUB_STEP_SUMMARY
        echo "**Built Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract the first tag for the main pull command
        MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        echo "### 📥 Pull the Image" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull $MAIN_TAG" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ⚙️ Claude Desktop Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Basic Configuration (Gemini only):**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        echo "{" >> $GITHUB_STEP_SUMMARY
        echo "  \"mcpServers\": {" >> $GITHUB_STEP_SUMMARY
        echo "    \"zen\": {" >> $GITHUB_STEP_SUMMARY
        echo "      \"command\": \"docker\"," >> $GITHUB_STEP_SUMMARY
        echo "      \"args\": [" >> $GITHUB_STEP_SUMMARY
        echo "        \"run\", \"--rm\", \"-i\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"GEMINI_API_KEY=<your_api_key_from_google_ai_studio>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-v\", \"<path_to_your_workspace>:<path_to_your_workspace>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"$MAIN_TAG\"" >> $GITHUB_STEP_SUMMARY
        echo "      ]" >> $GITHUB_STEP_SUMMARY
        echo "    }" >> $GITHUB_STEP_SUMMARY
        echo "  }" >> $GITHUB_STEP_SUMMARY
        echo "}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Full Configuration (All Providers):**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        echo "{" >> $GITHUB_STEP_SUMMARY
        echo "  \"mcpServers\": {" >> $GITHUB_STEP_SUMMARY
        echo "    \"zen\": {" >> $GITHUB_STEP_SUMMARY
        echo "      \"command\": \"docker\"," >> $GITHUB_STEP_SUMMARY
        echo "      \"args\": [" >> $GITHUB_STEP_SUMMARY
        echo "        \"run\", \"--rm\", \"-i\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"GEMINI_API_KEY=<your-gemini-key>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENAI_API_KEY=<your-openai-key>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"XAI_API_KEY=<your-xai-key>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENROUTER_API_KEY=<your-openrouter-key>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"CUSTOM_API_URL=http://host.docker.internal:11434/v1\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"CUSTOM_API_KEY=\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"CUSTOM_MODEL_NAME=llama3.2\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"DEFAULT_MODEL=auto\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENAI_ALLOWED_MODELS=o3-mini,o4-mini\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"GOOGLE_ALLOWED_MODELS=flash,pro\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"XAI_ALLOWED_MODELS=grok,grok-3-fast\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENROUTER_ALLOWED_MODELS=opus,sonnet,mistral\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENROUTER_REFERER=https://your-app.com\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"OPENROUTER_TITLE=Your App Name\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"CUSTOM_MODELS_CONFIG_PATH=/path/to/custom_models.json\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"DEFAULT_THINKING_MODE_THINKDEEP=high\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"CONVERSATION_TIMEOUT_HOURS=5\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"MAX_CONVERSATION_TURNS=20\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-e\", \"LOG_LEVEL=INFO\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"-v\", \"<path_to_your_workspace>:<path_to_your_workspace>\"," >> $GITHUB_STEP_SUMMARY
        echo "        \"$MAIN_TAG\"" >> $GITHUB_STEP_SUMMARY
        echo "      ]" >> $GITHUB_STEP_SUMMARY
        echo "    }" >> $GITHUB_STEP_SUMMARY
        echo "  }" >> $GITHUB_STEP_SUMMARY
        echo "}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Note:** Replace \`<path_to_your_workspace>\` with the directory where your projects are located." >> $GITHUB_STEP_SUMMARY
        echo "This is the directory that MCP server will have access to. Examples:" >> $GITHUB_STEP_SUMMARY
        echo "- macOS: \`/Users/your_username/Documents\` or \`/Users/your_username/Projects\`" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: \`/home/your_username/projects\` or \`/home/your_username/workspace\`" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: \`C:/Users/your_username/Documents\` or \`C:/Projects\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **Important:** The path must be the same on both sides of the colon!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🐳 Using Docker Compose" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Clone the repository" >> $GITHUB_STEP_SUMMARY
        echo "git clone https://github.com/PatrykIti/zen-mcp-server.git" >> $GITHUB_STEP_SUMMARY
        echo "cd zen-mcp-server" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Create .env file with your API keys" >> $GITHUB_STEP_SUMMARY
        echo "cp .env.example .env" >> $GITHUB_STEP_SUMMARY
        echo "nano .env" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Start the server" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ All Available Tags" >> $GITHUB_STEP_SUMMARY
        echo "Built and pushed the following tags:" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          echo "**Note:** This is a release build from tag ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "This image represents a stable release version." >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          echo "**Note:** This is a manual build triggered by repository dispatch" >> $GITHUB_STEP_SUMMARY
          echo "The latest tag has been updated to this build." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 View in GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
        echo "[View all versions and tags →](https://github.com/${{ github.repository }}/pkgs/container/zen-mcp-server)" >> $GITHUB_STEP_SUMMARY

    - name: Update README with latest image info
      if: false # Temporarily disabled as agreed with repo author
      # if: github.ref_type == 'tag' || (github.event_name == 'repository_dispatch' && github.event.client_payload.pr_number != '')
      run: |
        # Checkout main branch to avoid detached HEAD when pushing
        git fetch origin main:main
        git checkout main
        # Extract the primary image tag for updating README
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          # For tag releases, use the version tag
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          UPDATE_TYPE="release"
        else
          # For manual repository_dispatch without PR number, use latest tag
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          UPDATE_TYPE="manual"
        fi
        
        echo "Updating README.md with latest Docker image: $LATEST_TAG"
        
        # Update README.md with the latest image tag
        sed -i.bak "s|ghcr\.io/[^/]*/zen-mcp-server:[a-zA-Z0-9\._-]*|$LATEST_TAG|g" README.md
        
        # Also update docs/user-guides/installation.md
        sed -i.bak "s|ghcr\.io/[^/]*/zen-mcp-server:[a-zA-Z0-9\._-]*|$LATEST_TAG|g" docs/user-guides/installation.md
        
        # Also update docs/user-guides/configuration.md  
        sed -i.bak "s|ghcr\.io/[^/]*/zen-mcp-server:[a-zA-Z0-9\._-]*|$LATEST_TAG|g" docs/user-guides/configuration.md
        
        # Check if there are any changes
        if git diff --quiet README.md docs/user-guides/installation.md docs/user-guides/configuration.md; then
          echo "No changes needed in documentation"
        else
          echo "Documentation updated with new image tag"
          
          # Configure git for automated commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add and commit changes
          git add README.md docs/user-guides/installation.md docs/user-guides/configuration.md
          
          if [[ "$UPDATE_TYPE" == "release" ]]; then
            git commit -m "docs: Update Docker image references to ${{ github.ref_name }}

          Automated update after Docker image publish for release ${{ github.ref_name }}.
          All documentation now references the latest stable image.

          🤖 Automated by GitHub Actions"
          else
            git commit -m "docs: Update Docker image references to latest

          Automated update after Docker image build.
          Documentation updated to reference the latest image.

          🤖 Automated by GitHub Actions"
          fi
          
          # Push changes back to the repository
          git push --set-upstream origin main
          
          echo "### 📝 Documentation Updated" >> $GITHUB_STEP_SUMMARY
          echo "README.md and user guides have been automatically updated with the new Docker image tag: \`$LATEST_TAG\`" >> $GITHUB_STEP_SUMMARY
        fi

